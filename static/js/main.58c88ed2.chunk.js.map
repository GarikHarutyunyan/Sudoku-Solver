{"version":3,"sources":["pages/main/components/Cell.tsx","pages/main/components/Grid.tsx","pages/main/Solver.ts","pages/main/Main.tsx","App.js","reportWebVitals.js","index.js"],"names":["Cell","defaultProps","color","nextProps","JSON","stringify","this","props","value","isActive","onClick","style","className","console","log","clsx","cell_active","React","Component","Grid","onCellClick","y","x","matrix","activeCell","cellsStyle","cellsClassName","map","row","cell","Solver","possible","num","rows","cols","group","getGroup","swt","forEach","col","val","groupY","parseInt","groupX","row1","slice","row2","row3","solve","run","Main","numMatrix","Array","fill","state","objMatrix","onActiveCellChange","setState","clearAllCells","changeNum","cleanCell","onNumChange","newX","newY","newNum","newMatrix","solveProblem","newObjMatrix","controlButtons","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.58c88ed2.chunk.js","sourcesContent":["import clsx from \"clsx\";\r\nimport React from \"react\";\r\nimport \"./cell.scss\";\r\n\r\ntype CellProps = {\r\n  value: number;\r\n  color?: string;\r\n  isActive?: boolean;\r\n  onClick?: () => any;\r\n  style?: object;\r\n  className?: string;\r\n};\r\n\r\nclass Cell extends React.Component<CellProps> {\r\n  defaultProps = {\r\n    color: \"black\",\r\n  };\r\n\r\n  shouldComponentUpdate(nextProps: any) {\r\n    if (JSON.stringify(nextProps) === JSON.stringify(this.props)) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  render() {\r\n    const { value, isActive, onClick, color, style, className } = this.props;\r\n    console.log(value);\r\n\r\n    return (\r\n      <div\r\n        style={{ ...style, color: color }}\r\n        onClick={onClick && onClick()}\r\n        className={clsx(className, \"cell\", { cell_active: isActive })}\r\n      >\r\n        {value || \"\"}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport { Cell };\r\n","import clsx from \"clsx\";\r\nimport React from \"react\";\r\nimport { Cell } from \"./Cell\";\r\nimport \"./grid.scss\";\r\n\r\ntype GridProps = {\r\n  matrix: any[][];\r\n  activeCell?: any;\r\n  onCellClick?: any;\r\n  cellsStyle?: object;\r\n  cellsClassName?: string;\r\n};\r\n\r\nclass Grid extends React.Component<GridProps> {\r\n  onCellClick = (y: number, x: number) => {\r\n    const { matrix, onCellClick } = this.props;\r\n\r\n    if (!!matrix[y][x].onClick) {\r\n      matrix[y][x].onClick();\r\n    } else if (!!onCellClick) {\r\n      onCellClick(y, x);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { matrix, activeCell, cellsStyle, cellsClassName } = this.props;\r\n\r\n    return (\r\n      <div className={\"grid\"}>\r\n        {matrix.map((row, y) => {\r\n          return (\r\n            <div className={\"grid__row\"}>\r\n              {row.map((cell, x) => {\r\n                return (\r\n                  <Cell\r\n                    value={cell.value}\r\n                    color={cell.color}\r\n                    isActive={x === activeCell?.x && y === activeCell?.y}\r\n                    onClick={() => () => this.onCellClick(y, x)}\r\n                    style={cellsStyle}\r\n                    className={clsx(cellsClassName, {\r\n                      \"cell_bold-top-border\": y === 3 || y === 6,\r\n                      \"cell_bold-left-border\": x === 3 || x === 6,\r\n                    })}\r\n                  />\r\n                );\r\n              })}\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport { Grid };\r\n","export class Solver {\r\n  matrix: any = null;\r\n\r\n  constructor(matrix: any) {\r\n    this.matrix = matrix;\r\n  }\r\n\r\n  private possible = (y: number, x: number, num: number) => {\r\n    const rows = this.matrix;\r\n    const cols = this.matrix[y];\r\n    const group = this.getGroup(y, x);\r\n    let swt = true;\r\n\r\n    rows.forEach((row: any) => {\r\n      if (row[x].value === num) {\r\n        swt = false;\r\n      }\r\n    });\r\n    cols.forEach((col: any) => {\r\n      if (col.value === num) {\r\n        swt = false;\r\n      }\r\n    });\r\n    group.forEach((val: any) => {\r\n      if (val.value === num) {\r\n        swt = false;\r\n      }\r\n    });\r\n    return swt;\r\n  };\r\n  private getGroup = (y: number, x: number) => {\r\n    const groupY = parseInt(\"\" + y / 3, 10);\r\n    const groupX = parseInt(\"\" + x / 3, 10);\r\n\r\n    const row1 = this.matrix[3 * groupY].slice(3 * groupX, 3 * groupX + 3);\r\n    const row2 = this.matrix[3 * groupY + 1].slice(3 * groupX, 3 * groupX + 3);\r\n    const row3 = this.matrix[3 * groupY + 2].slice(3 * groupX, 3 * groupX + 3);\r\n\r\n    return [...row1, ...row2, ...row3];\r\n  };\r\n\r\n  public solve = () => {\r\n    for (var y = 0; y < 9; y++) {\r\n      for (var x = 0; x < 9; x++) {\r\n        if (this.matrix[y][x].value === 0) {\r\n          for (var num = 1; num < 10; num++) {\r\n            if (this.possible(y, x, num)) {\r\n              this.matrix[y][x].value = num;\r\n              this.matrix[y][x].color = \"grey\";\r\n              if (!this.solve()) {\r\n                this.matrix[y][x].value = 0;\r\n              } else {\r\n                return true;\r\n              }\r\n            }\r\n          }\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  };\r\n\r\n  public run = () => {\r\n    this.solve();\r\n\r\n    return this.matrix;\r\n  };\r\n}\r\n","import React from \"react\";\r\nimport { Grid } from \"./components/Grid\";\r\nimport \"./main.scss\";\r\nimport { Solver } from \"./Solver\";\r\n\r\nclass Main extends React.Component {\r\n  numMatrix = Array(9).fill(Array(9).fill(0));\r\n\r\n  state = {\r\n    objMatrix: this.numMatrix.map((row) => {\r\n      return row.map((val: any) => {\r\n        return { value: val, color: \"black\" };\r\n      });\r\n    }),\r\n    activeCell: { x: 0, y: 0 },\r\n  };\r\n\r\n  onActiveCellChange = (y: number, x: number) => {\r\n    this.setState({\r\n      activeCell: { x: x, y: y },\r\n    });\r\n  };\r\n\r\n  clearAllCells = () => {\r\n    Array(9)\r\n      .fill(Array(9).fill(0))\r\n      .forEach((row: any, y: number) => {\r\n        return row.forEach((num: any, x: number) => {\r\n          return this.changeNum(y, x, num);\r\n        });\r\n      });\r\n  };\r\n\r\n  cleanCell = () => {\r\n    const { activeCell } = this.state;\r\n    const { x, y } = activeCell;\r\n\r\n    this.changeNum(y, x, 0);\r\n  };\r\n\r\n  onNumChange = (newX: number, newY: number) => {\r\n    const { activeCell } = this.state;\r\n    const { x, y } = activeCell;\r\n    const newNum = 3 * newX + newY + 1;\r\n\r\n    this.changeNum(y, x, newNum);\r\n  };\r\n\r\n  changeNum = (y: number, x: number, num: number) => {\r\n    const { objMatrix } = this.state;\r\n    let newMatrix = objMatrix;\r\n\r\n    newMatrix[y][x].value = num;\r\n    newMatrix[y][x].color = \"black\";\r\n    this.setState({\r\n      objMatrix: newMatrix,\r\n    });\r\n  };\r\n\r\n  solveProblem = () => {\r\n    const solver = new Solver(this.state.objMatrix);\r\n    const newObjMatrix = solver.run();\r\n\r\n    this.setState({\r\n      objMatrix: newObjMatrix,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { objMatrix, activeCell } = this.state;\r\n    const numBoard = [\r\n      [\r\n        { value: 1, color: \"black\" },\r\n        { value: 2, color: \"black\" },\r\n        { value: 3, color: \"black\" },\r\n      ],\r\n      [\r\n        { value: 4, color: \"black\" },\r\n        { value: 5, color: \"black\" },\r\n        { value: 6, color: \"black\" },\r\n      ],\r\n      [\r\n        { value: 7, color: \"black\" },\r\n        { value: 8, color: \"black\" },\r\n        { value: 9, color: \"black\" },\r\n      ],\r\n    ];\r\n\r\n    const controlButtons = [\r\n      [\r\n        {\r\n          value: \"Clean Cell\",\r\n          color: \"black\",\r\n          onClick: this.cleanCell,\r\n        },\r\n      ],\r\n      [{ value: \"Clear All\", color: \"black\", onClick: this.clearAllCells }],\r\n      [{ value: \"Solve\", color: \"black\", onClick: this.solveProblem }],\r\n    ];\r\n\r\n    return (\r\n      <div className={\"main\"}>\r\n        <Grid\r\n          matrix={objMatrix}\r\n          activeCell={activeCell}\r\n          onCellClick={this.onActiveCellChange}\r\n        />\r\n        <Grid matrix={numBoard} onCellClick={this.onNumChange} />\r\n        <Grid\r\n          matrix={controlButtons}\r\n          onCellClick={this.onNumChange}\r\n          cellsClassName={\"cell_for-text\"}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport { Main };\r\n","import \"./App.css\";\r\nimport { Main } from \"./pages/main/Main\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Main />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}